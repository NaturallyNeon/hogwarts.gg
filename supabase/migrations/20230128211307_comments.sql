create table 
  public.comments (
    id bigint generated by default as identity primary key,
    user_id uuid not null references public.users default auth.uid(),
    post_id bigint references public.posts, 
    node_id bigint references public.nodes,
    body text not null,
    upvotes bigint not null default '0'::bigint,
    downvotes bigint not null default '0'::bigint,
    created_at timestamp with time zone default now()
);

comment on table public.comments is 'Comments of posts & nodes.';

alter table "public"."comments" enable row level security;

create policy "Enable delete for authorized users"
on "public"."comments"
as permissive
for delete
to public
using (authorize('comments.delete'::app_permission, auth.uid()));


create policy "Enable insert for authenticated users only"
on "public"."comments"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."comments"
as permissive
for select
to public
using (true);


create policy "Enable update for authorized users"
on "public"."comments"
as permissive
for update
to public
using (authorize('comments.edit'::app_permission, auth.uid()));


insert into
  public.role_permissions (role, permission)
values
  ('admin', 'comments.delete'),
  ('admin', 'comments.edit'),
  ('moderator', 'comments.delete'),
  ('moderator', 'comments.edit');
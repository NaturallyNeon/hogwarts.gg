create table
  public.comments (
    id bigint generated by default as identity primary key,
    user_id uuid not null references public.users default auth.uid(),
    post_id bigint references public.posts,
    node_id bigint references public.nodes,
    body text not null,
    created_at timestamp
    with
      time zone default now(),
      constraint only_one_value check (
        (
          post_id is null
          or node_id is null
        )
        and not (
          post_id is null
          and node_id is null
        )
      )
  );


comment on table public.comments is 'Comments of posts & nodes.';


alter table
  "public"."comments" enable row level security;


create policy "Allow individual delete access" on "public"."comments" for delete using (auth.uid() = user_id);


create policy "Allow authenticated insert access" on "public"."comments" as permissive for insert to authenticated
with
  check (true);


create policy "Allow individual update access" on "public"."comments" for
update
  using (auth.uid() = user_id);


create policy "Allow public read access" on "public"."comments" as permissive for
select
  to public using (true);


create policy "Enable update for authorized users" on "public"."comments" as permissive for
update
  to public using (authorize('comments.edit', auth.uid()));


create policy "Enable delete for authorized users" on "public"."comments" as permissive for delete to public using (authorize('comments.delete', auth.uid()));


insert into
  public.role_permissions (role, permission)
values
  ('admin', 'comments.delete'),
  ('admin', 'comments.edit'),
  ('moderator', 'comments.delete'),
  ('moderator', 'comments.edit');


-- Add comments bucket
insert into
  storage.buckets (id, name, public)
values
  ('comments', 'comments', true);